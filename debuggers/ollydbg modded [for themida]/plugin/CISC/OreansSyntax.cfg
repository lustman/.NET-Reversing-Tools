// This file contains the data to transfor from handlers to CV Syntax
// First line must contain Instruction and Sufix id that will replace the handlers ids
// Second line first number contains the number of handlersids to check, the rest
// contains the handlers ids to check
// Numbers are readed as hex
// Remember to put the bigger on the beginning
// Supporst until 1000 syntax


// HLT
26	00	//	HLT
04	00A3	0000	0001	0001

26	00	//	HLT
04	00A3	0000	0015	0015


// SPECIAL BYTE REGISTER (ADD CODE TO DECODE CORRECTLY)
02	03	//	MOVE %sADDR, %.8x%h 
04	0000	0004	0006	0001
02	03	//	MOVE %sADDR, %.8x%h 
04	0000	0004	0006	0015


// SPECIAL SHL
19	03	// SHL %sADDR, %.8x%h
04	0009	0004	015F	0001

19	03	// SHL %sADDR, %.8x%h
04	0009	0004	015F	0015


// SPECIAL SUB
0C	03	// SUB ADDR, %.8x%h 
04	0009	0004	0026	0015

0C	03	// SUB ADDR, %.8x%h 
04	0009	0004	0026	0001


// SPECIAL ADD
08	03	// ADD ADDR, %.8x%h 
04	0009	0004	0006	0015

08	03	// ADD ADDR, %.8x%h 
04	0009	0004	0006	0001



// MOVE
02	03	// MOVE %sADDR, %.8x%h GOT REGISTER
02	0000	0001

02	03	// MOVE %sADDR, %.8x%h 
02	0000	0015

02	0E	// MOVE ADDR, DWORD PTR %s[%.8x%h] GOT [REGISTER]
02	0007	0015

02	0E	// MOVE ADDR, DWORD PTR %s[%.8x%h] 
02	0007	0001

02	03	// MOVE %sADDR, %.8x%h GOT CONST
02	0004	0001

02	03	// MOVE %sADDR, %.8x%h
02	0004	0015



// SPECIAL ADD
08	0F	// ADD ADDR, QWORD PTR %s[%.8x%h]
01	0153


// LOAD SYNTAX
00	01	// LOAD ADDR
01	0009

00	04	// LOAD BYTE PTR %s[ADDR]
01	000A

00	05	// LOAD WORD PTR %s[ADDR]
01	000B

00	06	// LOAD DWORD PTR %s[ADDR]
01	000C

00	07	// LOAD QWORD PTR %s[ADDR]
01	000D

00	08	// LOAD %sBYTE PTR [%.8x%h] 
01	000E

00	09	// LOAD %sWORD PTR [%.8x%h] 
01	000F

00	0A	// LOAD %sDWORD PTR [%.8x%h] 
01	0007

00	0B	// LOAD %sQWORD PTR [%.8x%h] 
01	0010

00	08	// LOAD %sBYTE PTR [%.8x%h] 
01	0011

00	09	// LOAD %sWORD PTR [%.8x%h] 
01	0012

00	0A	// LOAD %sDWORD PTR [%.8x%h] 
01	0013

00	0B	// LOAD %sQWORD PTR [%.8x%h] 
01	0014

00	20	// LOAD %sBYTE %d 
01	0002

00	21	// LOAD %sWORD %d 
01	0003

00	22	// LOAD %sDWORD %d 
01	0004

00	23	// LOAD %sQWORD %d 
01	0005

00	1E	// LOAD FLAGS
01	0007


// STORE SYNTAX
01	01	// STORE ADDR
01	0001

01	01	// STORE ADDR
01	0015

01	04	// STORE BYTE PTR %s[ADDR] 
01	0016

01	05	// STORE WORD PTR %s[ADDR] 
01	0017

01	06	// STORE DWORD PTR %s[ADDR] 
01	0018

01	07	// STORE QWORD PTR %s[ADDR] 
01	0019

01	1E	// STORE %S (FLAGS or DIRECT DWORD REGISTER)
01	001C


// ADD
08	18	// ADD BYTE
01	0022

08	19	// ADD WORD
01	0023

08	1A	// ADD DWORD
01	0024


// SUB 
0C	18	// SUB BYTE
01	0027

0C	19	// SUB WORD
01	0028

0C	1A	// SUB DWORD
01	0029


// ADC
07	18	// SUB BYTE
01	002F

07	19	// SUB WORD
01	0030

07	1A	// SUB DWORD
01	0031


// AND
09	18	// AND BYTE
01	0033

09	19	// AND WORD
01	0034

09	1A	// AND DWORD
01	0035


// CMP 
0A	18	// CMP BYTE
01	0037

0A	19	// CMP WORD
01	0038

0A	1A	// CMP DWORD
01	0039


// XOR 
0E	18	// XOR BYTE
01	003B

0E	19	// XOR WORD
01	003C

0E	1A	// XOR DWORD
01	003D


// OR 
0B	18	// OR BYTE
01	003F

0B	19	// OR WORD
01	0040

0B	1A	// OR DWORD
01	0041


// TEST 
0D	18	// TEST BYTE
01	0043

0D	19	// TEST WORD
01	0044

0D	1A	// TEST DWORD
01	0045


// MOVZX 
0F	19	// MOVZX WORD
01	0048

0F	1A	// MOVZX DWORD
01	0049


// MOVZX_W 
10	1A	// MOVZX_W DWORD
01	004D


// INC 
12	18	// INC BYTE
01	0053

12	19	// INC WORD
01	0054

12	1A	// INC DWORD
01	0055


// RCL 
13	18	// RCL BYTE
01	0057

13	19	// RCL WORD
01	0058

13	1A	// RCL DWORD
01	0059


// RCR 
14	18	// RCR BYTE
01	005B

14	19	// RCR WORD
01	005C

14	1A	// RCR DWORD
01	005D


// ROL 
15	18	// ROL BYTE
01	005F

15	19	// ROL WORD
01	0060

15	1A	// ROL DWORD
01	0061


// ROR 
16	18	// ROR BYTE
01	0063

16	19	// ROR WORD
01	0064

16	1A	// ROR DWORD
01	0065


// SAL 
17	18	// SAL BYTE
01	0067

17	19	// SAL WORD
01	0068

17	1A	// SAL DWORD
01	0069


// SAR 
18	18	// SAR BYTE
01	006B

18	19	// SAR WORD
01	006C

18	1A	// SAR DWORD
01	006D


// SHL 
19	18	// SHL BYTE
01	006F

19	19	// SHL WORD
01	0070

19	1A	// SHL DWORD
01	0071


// SHR 
1A	18	// SHR BYTE
01	0073

1A	19	// SHR WORD
01	0074

1A	1A	// SHR DWORD
01	0075


// DEC 
1B	18	// DEC BYTE
01	0077

1B	19	// DEC WORD
01	0078

1B	1A	// DEC DWORD
01	0079


// NOP
1C	00	// NOP
01	007B


// MOVSX 
1D	19	// MOVSX WORD
01	0080

1D	1A	// MOVSX DWORD
01	0081


// MOVSX_W 
1E	1A	// MOVSX_W DWORD
01	0085


// CLC 
1F	00	// CLC 
01	0087


// CLD 
20	00	// CLD 
01	008B


// CLI 
21	00	// CLI 
01	008F


// CMC 
22	00	// CMC 
01	0093


// STC 
23	00	// STC 
01	0097


// STD 
24	00	// STD 
01	009B


// STI 
25	00	// STI 
01	009F


// BT 
27	19	// BT WORD
01	00A8

27	1A	// BT DWORD
01	00A9


// BTC 
28	18	// BTC BYTE
01	00AB

28	19	// BTC WORD
01	00AC


// BTR 
29	18	// BTR BYTE
01	00AF

29	19	// BTR WORD
01	00B0


// BTS 
2A	18	// BTS BYTE
01	00B3

2A	19	// BTS WORD
01	00B4


// SBB 
2B	18	// SBB BYTE
01	00B7

2B	19	// SBB WORD
01	00B8

2B	1A	// SBB DWORD
01	00B9


// MUL 
2C	18	// MUL BYTE
01	00BB

2C	19	// MUL WORD
01	00BC

2C	1A	// MUL DWORD
01	00BD


// IMUL 
2D	18	// IMUL BYTE
01	00BF

2D	19	// IMUL WORD
01	00C0

2D	1A	// IMUL DWORD
01	00C1


// DIV 
2E	18	// DIV BYTE
01	00C3

2E	19	// DIV WORD
01	00C4

2E	1A	// DIV DWORD
01	00C5


// IDIV 
2F	18	// IDIV BYTE
01	00C7

2F	19	// IDIV WORD
01	00C8

2F	1A	// IDIV DWORD
01	00C9


// BSWAP 
30	1A	// BSWAP DWORD
01	00CD


// NEG 
31	18	// NEG BYTE
01	00CF

31	19	// NEG WORD
01	00D0

31	1A	// NEG DWORD
01	00D1


// NOT 
32	18	// NOT BYTE
01	00D3

32	19	// NOT WORD
01	00D4

32	1A	// NOT DWORD
01	00D5